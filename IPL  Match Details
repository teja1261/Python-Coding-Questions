Write a program that reads all the match outcomes and summarizes the information of all the matches in a points table.
points are given to the teams based on the outcomes of the match.

A win win earns a team 3 points. A draw earns 1. A loss earns 0.

in the points table the following information is expected:

MP : Matches Played         
W : Matches Won       
D : Matchhes Drawn(Tied)        
L : Matchhes Lost
P : Points

Input:
6
CSK;RR;win
RR;DD;draw
MI;KKR;win
SH;RR;loss
CSK;DD;draw
MI;DD;draw

Output:
Team                    | MP |  W |  D |  L |  P |
CSK                     |  2 |  1 |  1 |  0 |  4 |
MI                      |  2 |  1 |  1 |  0 |  4 |
RR                      |  3 |  1 |  1 |  1 |  4 |
DD                      |  3 |  0 |  3 |  0 |  3 |
KKR                     |  1 |  0 |  0 |  1 |  0 |
SH                      |  1 |  0 |  0 |  1 |  0 |


Code :

n = int(input())

empty_dict = {}

for i in range(n):
    T1,T2,O = input().split(';')
    if T1 not in empty_dict:
        empty_dict.update({T1:{'MP':0,'W':0,'D':0,'L':0,'P':0}})
    if T2 not in empty_dict:
        empty_dict.update({T2:{'MP':0,'W':0,'D':0,'L':0,'P':0}})    
    if O =='win':
        empty_dict[T1]['MP'] +=1
        empty_dict[T2]['MP'] +=1
        empty_dict[T1]['W'] +=1
        empty_dict[T2]['L'] +=1
        empty_dict[T1]['P'] +=3
    elif O =='draw':
        empty_dict[T1]['MP'] +=1
        empty_dict[T2]['MP'] +=1
        empty_dict[T1]['D'] +=1
        empty_dict[T2]['D'] +=1
        empty_dict[T1]['P'] +=1
        empty_dict[T2]['P'] +=1
    elif O =='loss':
        empty_dict[T1]['MP'] +=1
        empty_dict[T2]['MP'] +=1
        empty_dict[T2]['W'] +=1
        empty_dict[T1]['L'] +=1
        empty_dict[T2]['P'] +=3
empty_dict = sorted(empty_dict.items())
empty_dict = dict(empty_dict)
empty_dict = sorted(empty_dict.items(), key = lambda x:x[1]['P'] ,reverse = True)
empty_dict = dict(empty_dict)
print('{:<24}'.format('Team')+ '|' + ' {:>2} '.format('MP')+ '|' + ' {:>2} '.format('W')+ '|' + ' {:>2} '.format('D')+ '|' + ' {:>2} '.format('L')+ '|' + ' {:>2} '.format('P')+ '|')
for i,j in empty_dict.items():
    print('{:<24}'.format(i)+ '|' + ' {:>2} '.format(j['MP'])+ '|' + ' {:>2} '.format(j['W'])+ '|' + ' {:>2} '.format(j['D'])+ '|' + ' {:>2} '.format(j['L'])+ '|' + ' {:>2} '.format(j['P'])+ '|')
    
    
    
    
    
    
    
    
    
    DBMS
    
    
    
    
    class InvalidField(Exception):
    pass

class MultipleObjectsReturned(Exception):
    pass

class DoesNotExist(Exception):
    pass

class Student:
    def __init__(self, name, age, score,student_id = None):
        self.name = name
        self.student_id = student_id
        self.age = age
        self.score = score
        
    @classmethod
    def get(cls,**kargs):
        list = ['student_id','name','age','score']
        
        for i in kargs:
            if i not in list:
                raise InvalidField
            
        import sqlite3
        connection = sqlite3.connect("students.sqlite3")
        crsr = connection.cursor()
        
        for i,j in kargs.items():
            if kargs[i] != None:
                if i != 'name':
                    query = "select * from Student where {} = {}".format(i,j)
                else:
                    query = "select * from Student where {} = '{}'".format(i,j)
                    
        crsr.execute(query)
        ans= crsr.fetchall()
        if len(ans) > 1:
            raise MultipleObjectsReturned
        if ans == []:
            raise DoesNotExist
        connection.close()
        return cls(student_id = ans[0][0],name = ans[0][1],age = ans[0][2],score = ans[0][3])
    
    def delete(self):
        import sqlite3
        connection = sqlite3.connect("students.sqlite3")
        crsr = connection.cursor()
        crsr.execute("delete from student where student_id = {}".format(self.student_id))
        connection.commit()
        connection.close()
        
    def save(self):
        import sqlite3
        connection = sqlite3.connect("students.sqlite3")
        crsr = connection.cursor()
        if self.student_id == None:
            crsr.execute("Insert Into Student(name,age,score)values(?,?,?)",(self.name,self.age,self.score))
            self.student_id = crsr.lastrowid
        else:
            crsr.execute("Update student set name = '{}',age = {},score = {} where student_id = {}".format(self.name,self.age,self.score,self.student_id))
        connection.commit()
        connection.close()
